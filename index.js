const { Telegraf } = require('telegraf');
const knex = require('knex')({
  client: 'sqlite3',
  connection: { filename: './queue.db' },
  useNullAsDefault: true
});

const bot = new Telegraf('7794224797:AAFhNDfHkPEoOLxCzRzMsO_JQK72Wc2BOWU'); // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ @BotFather

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function initDB() {
  await knex.schema.createTableIfNotExists('queues', table => {
    table.increments('id').primary();
    table.string('title');
    table.integer('admin_id');
    table.string('meet_link');
    table.timestamp('created_at').defaultTo(knex.fn.now());
  });
  
  await knex.schema.createTableIfNotExists('participants', table => {
    table.increments('id').primary();
    table.integer('queue_id');
    table.integer('user_id');
    table.string('username');
    table.integer('position');
    table.string('status').defaultTo('waiting');
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(ctx => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –Ω–∞ —Å–æ–∑–≤–æ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'));

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', ctx => {
  ctx.reply(`
üìå **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞**:
/createqueue –ù–∞–∑–≤–∞–Ω–∏–µ - –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
/adduser @username - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/next - –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ
/viewqueue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å

üìå **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:
/mystatus - –ú–æ—è –ø–æ–∑–∏—Ü–∏—è
/leave - –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  `);
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
bot.command('createqueue', async ctx => {
  const [_, title] = ctx.message.text.split(' ');
  const meetLink = `https://meet.google.com/${Math.random().toString(36).substr(2, 9)}`;
  
  await knex('queues').insert({
    title,
    admin_id: ctx.from.id,
    meet_link: meetLink
  });
  
  ctx.reply(`‚úÖ –û—á–µ—Ä–µ–¥—å "${title}" —Å–æ–∑–¥–∞–Ω–∞!`);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
bot.command('adduser', async ctx => {
  const [_, username] = ctx.message.text.split(' ');
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /createqueue');
  
  const position = await knex('participants')
    .where({ queue_id: queue.id })
    .count('* as count')
    .first()
    .then(res => res.count + 1);
  
  await knex('participants').insert({
    queue_id: queue.id,
    username,
    position,
    user_id: username.replace('@', '')
  });
  
  ctx.reply(`‚úÖ @${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å "${queue.title}" (–ø–æ–∑–∏—Ü–∏—è: ${position})`);
});

// –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ
bot.command('next', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏!');
  
  const nextUser = await knex('participants')
    .where({ queue_id: queue.id, status: 'waiting' })
    .orderBy('position', 'asc')
    .first();
  
  if (!nextUser) return ctx.reply('‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!');
  
  await knex('participants')
    .where({ id: nextUser.id })
    .update({ status: 'active' });
  
  ctx.telegram.sendMessage(
    nextUser.user_id,
    `üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: ${queue.meet_link}`
  );
  
  ctx.reply(`üëâ –í—ã–∑–≤–∞–Ω @${nextUser.username}`);
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏
bot.command('viewqueue', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏!');
  
  const participants = await knex('participants')
    .where({ queue_id: queue.id })
    .orderBy('position', 'asc');
  
  let message = `üìã –û—á–µ—Ä–µ–¥—å: ${queue.title}\n\n`;
  participants.forEach(p => {
    message += `${p.position}. @${p.username} (${p.status === 'waiting' ? '‚è≥' : '‚úÖ'})\n`;
  });
  
  ctx.reply(message);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
bot.command('mystatus', async ctx => {
  const queues = await knex('participants')
    .where({ user_id: ctx.from.id })
    .join('queues', 'participants.queue_id', 'queues.id')
    .select('queues.title', 'participants.position', 'participants.status');
  
  if (!queues.length) return ctx.reply('‚ÑπÔ∏è –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏');
  
  let message = 'üìä –í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n';
  queues.forEach(q => {
    message += `üîπ ${q.title}: ${q.status === 'waiting' ? `–ü–æ–∑–∏—Ü–∏—è ${q.position}` : '–°–µ–π—á–∞—Å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!'}\n`;
  });
  
  ctx.reply(message);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});