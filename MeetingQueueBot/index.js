const { Telegraf, Markup } = require('telegraf');
const knex = require('knex')({
  client: 'sqlite3',
  connection: { filename: './queue.db' },
  useNullAsDefault: true,
});
const bot = new Telegraf('7794224797:AAFhNDfHkPEoOLxCzRzMsO_JQK72Wc2BOWU'); // –¢–≤–æ–π —Ç–æ–∫–µ–Ω

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
function log(...args) {
  console.log(new Date().toISOString(), ...args);
}

// --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ---
const adminStates = new Map();

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async function initDB() {
  if (!(await knex.schema.hasTable('queues'))) {
    await knex.schema.createTable('queues', (table) => {
      table.increments('id').primary();
      table.string('title').notNullable();
      table.integer('admin_id').notNullable();
      table.string('admin_username').defaultTo('');
      table.string('meet_link').defaultTo('');
      table.timestamp('created_at').defaultTo(knex.fn.now());
    });
    log('–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ queues');
  }

  if (!(await knex.schema.hasTable('participants'))) {
    await knex.schema.createTable('participants', (table) => {
      table.increments('id').primary();
      table.integer('queue_id').notNullable().references('queues.id').onDelete('CASCADE');
      table.integer('user_id').nullable();
      table.string('username').defaultTo('');
      table.integer('position').notNullable();
      table.string('status').defaultTo('waiting'); // waiting, active, done
    });
    log('–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ participants');
  }

  if (!(await knex.schema.hasTable('users'))) {
    await knex.schema.createTable('users', (table) => {
      table.increments('id').primary();
      table.integer('user_id').unique().notNullable();
      table.string('username').unique().notNullable();
      table.timestamp('created_at').defaultTo(knex.fn.now());
    });
    log('–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users');
  }
}

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
function getAdminPanelKeyboard(queueId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', `VIEW_PARTICIPANTS_${queueId}`)],
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', `ADD_USERS_${queueId}`)],
    [Markup.button.callback('üîó –£–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', `SET_LINK_${queueId}`)],
    [Markup.button.callback('‚è≠Ô∏è –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ', `CALL_NEXT_${queueId}`)],
    [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', `DELETE_QUEUE_${queueId}`)],
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'ADMIN_BACK')],
  ]);
}

// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram ---
async function setCommands() {
  await bot.telegram.setMyCommands([
    { command: 'start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
    { command: 'help', description: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
    { command: 'createqueue', description: '–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å' },
    { command: 'adminpanel', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏' },
    { command: 'listqueues', description: '–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –∞–¥–º–∏–Ω–∞' },
    { command: 'join', description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏' },
    { command: 'mystatus', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥—è—Ö' },
  ]);
}

// --- /start ---
bot.start(async (ctx) => {
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏!\n\n` +
      `–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n` +
      `‚Ä¢ –ê–¥–º–∏–Ω:\n` +
      `  - –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å: /createqueue –ù–∞–∑–≤–∞–Ω–∏–µ\n` +
      `  - –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ—Ä–µ–¥—è–º–∏: /adminpanel\n` +
      `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n` +
      `  - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –∞–¥–º–∏–Ω–∞: /listqueues @username_–∞–¥–º–∏–Ω–∞\n` +
      `  - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏: /join @username_–∞–¥–º–∏–Ω–∞\n` +
      `  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /mystatus\n\n` +
      `–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`
  );
  log(`/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
});

// --- /help ---
bot.help(async (ctx) => {
  await ctx.reply(
    `üìå –ö–æ–º–∞–Ω–¥—ã:\n` +
      `/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å\n` +
      `/createqueue –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å (–¥–ª—è –∞–¥–º–∏–Ω–∞)\n` +
      `/adminpanel ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)\n` +
      `/listqueues @username_–∞–¥–º–∏–Ω–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∞\n` +
      `/join @username_–∞–¥–º–∏–Ω–∞ ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏\n` +
      `/mystatus ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥—è—Ö\n\n` +
      `–í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.`
  );
  log(`/help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
});

// --- /createqueue –ù–∞–∑–≤–∞–Ω–∏–µ ---
bot.command('createqueue', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /createqueue –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞');
  }
  const title = args.join(' ').trim();
  try {
    const [id] = await knex('queues').insert({
      title,
      admin_id: ctx.from.id,
      admin_username: ctx.from.username || '',
      meet_link: '',
    });
    await ctx.reply(`‚úÖ –û—á–µ—Ä–µ–¥—å "${title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adminpanel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.`);
    log(`–°–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å "${title}" –∞–¥–º–∏–Ω–æ–º ${ctx.from.id} (id: ${id}, username: ${ctx.from.username})`);
  } catch (e) {
    log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏.');
  }
});

// --- /listqueues @username_–∞–¥–º–∏–Ω–∞ ---
bot.command('listqueues', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0 || !args[0].startsWith('@')) {
    return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ username –∞–¥–º–∏–Ω–∞. –ü—Ä–∏–º–µ—Ä: /listqueues @adminuser');
  }
  const adminUsername = args[0].substring(1).toLowerCase();

  try {
    const queues = await knex('queues').whereRaw('lower(admin_username) = ?', [adminUsername]);
    if (queues.length === 0) {
      return ctx.reply(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${adminUsername} –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.`);
    }
    const list = queues.map(q => `ID: ${q.id} ‚Äî "${q.title}"`).join('\n');
    await ctx.reply(`–û—á–µ—Ä–µ–¥–∏ @${adminUsername}:\n${list}`);
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –≤ /listqueues:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π.');
  }
});

// --- Callback-–∑–∞–ø—Ä–æ—Å—ã ---
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id;

  if (data.startsWith('ADMIN_QUEUE_')) {
    const queueId = parseInt(data.split('_')[2]);
    try {
      const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
      if (!queue) {
        await ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.');
        return;
      }
      await ctx.editMessageText(
        `üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é "${queue.title}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        { reply_markup: getAdminPanelKeyboard(queueId).reply_markup }
      );
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ ADMIN_QUEUE:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.');
    }
    return;
  }

  if (data === 'ADMIN_BACK') {
    try {
      const queues = await knex('queues').where({ admin_id: userId }).orderBy('created_at', 'desc');
      if (queues.length === 0) {
        await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ /createqueue');
        return;
      }
      const buttons = queues.map((q) => [Markup.button.callback(q.title, `ADMIN_QUEUE_${q.id}`)]);
      await ctx.editMessageText('–í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:', Markup.inlineKeyboard(buttons));
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ ADMIN_BACK:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.');
    }
    return;
  }

  if (data.startsWith('VIEW_PARTICIPANTS_')) {
    const queueId = parseInt(data.split('_')[2]);
    try {
      const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
      if (!queue) {
        await ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω.');
        return;
      }
      const participants = await knex('participants').where({ queue_id: queueId }).orderBy('position', 'asc');
      if (participants.length === 0) {
        await ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');
        return;
      }
      let text = `üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ "${queue.title}":\n\n`;
      for (const p of participants) {
        text += `${p.position}. @${p.username || '–±–µ–∑ –∏–º–µ–Ω–∏'} ‚Äî ${p.status}\n`;
      }
      await ctx.editMessageText(
        text,
        Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `ADMIN_QUEUE_${queueId}`)]])
      );
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ VIEW_PARTICIPANTS:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.');
    }
    return;
  }

  if (data.startsWith('ADD_USERS_')) {
    const queueId = parseInt(data.split('_')[2]);
    adminStates.set(`${userId}-${queueId}`, { type: 'awaiting_usernames' });
    try {
      await ctx.editMessageText(
        '–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2):\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏.',
        Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', `ADMIN_QUEUE_${queueId}`)]])
      );
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ ADD_USERS:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–æ–¥–∞.');
    }
    return;
  }

  if (data.startsWith('SET_LINK_')) {
    const queueId = parseInt(data.split('_')[2]);
    adminStates.set(`${userId}-${queueId}`, { type: 'awaiting_link' });
    try {
      await ctx.editMessageText(
        'üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:',
        Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', `ADMIN_QUEUE_${queueId}`)]])
      );
      await ctx.answerCbQuery();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ SET_LINK:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏.');
    }
    return;
  }

  if (data.startsWith('CALL_NEXT_')) {
    const queueId = parseInt(data.split('_')[2]);
    try {
      const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
      if (!queue) {
        return ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ª—é–±–æ–π: —Å user_id –∏–ª–∏ –±–µ–∑)
      const nextUser = await knex('participants')
        .where({ queue_id: queueId, status: 'waiting' })
        .orderBy('position')
        .first();

      if (!nextUser) {
        return ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');
      }

      await knex('participants').where({ id: nextUser.id }).update({ status: 'active' });

      if (nextUser.user_id) {
        try {
          await ctx.telegram.sendMessage(
            nextUser.user_id,
            `üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≤ "${queue.title}"!\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: ${queue.meet_link || '[—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞]'}`
          );
        } catch (e) {
          log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É:', e);
        }
      }

      await knex('participants').where({ id: nextUser.id }).del();
      await ctx.answerCbQuery(`‚úÖ –í—ã–∑–≤–∞–Ω @${nextUser.username || '—É—á–∞—Å—Ç–Ω–∏–∫'}`);
    } catch (e) {
      log('–û—à–∏–±–∫–∞ –≤ CALL_NEXT:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞.');
    }
    return;
  }

  if (data.startsWith('DELETE_QUEUE_')) {
    const queueId = parseInt(data.split('_')[2]);
    try {
      const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
      if (!queue) {
        await ctx.answerCbQuery('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      await knex('participants').where({ queue_id: queueId }).del();
      await knex('queues').where({ id: queueId }).del();

      await ctx.answerCbQuery(`‚úÖ –û—á–µ—Ä–µ–¥—å "${queue.title}" —É–¥–∞–ª–µ–Ω–∞.`);
      await ctx.editMessageText(`üóëÔ∏è –û—á–µ—Ä–µ–¥—å "${queue.title}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', e);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.');
    }
    return;
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
  await ctx.answerCbQuery();
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∞–º–∏ ---
bot.on('message', async (ctx, next) => {
  const userId = ctx.from.id;
  const username = ctx.from.username ? ctx.from.username.toLowerCase() : null;

  if (username) {
    try {
      await knex('users')
        .insert({ user_id: userId, username })
        .onConflict('user_id') // –µ—Å–ª–∏ user_id —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        .ignore();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    }
  }

  for (const [key, state] of adminStates.entries()) {
    if (!key.startsWith(`${userId}-`)) continue;

    const queueId = parseInt(key.split('-')[1]);
    const text = ctx.message.text || '';

    if (state.type === 'awaiting_usernames') {
      if (!text) {
        return ctx.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');
      }
      const usernames = text
        .split(',')
        .map((u) => u.trim().replace(/^@/, ''))
        .filter((u) => u.length > 0);
      if (usernames.length === 0) {
        return ctx.reply('‚ùó –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');
      }

      try {
        const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
        if (!queue) {
          adminStates.delete(key);
          return ctx.reply('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω.');
        }

        const countObj = await knex('participants').where({ queue_id: queueId }).count('id as count').first();
        let pos = countObj.count || 0;

        let addedUsers = [];
        for (const username of usernames) {
          const existingUser = await knex('users').where('username', username.toLowerCase()).first();
          const userIdToInsert = existingUser ? existingUser.user_id : null;

          await knex('participants').insert({
            queue_id: queueId,
            user_id: userIdToInsert,
            username,
            position: pos,
            status: 'waiting',
          });

          addedUsers.push(username);
        }
        adminStates.delete(key);
        await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${addedUsers.map((u) => '@' + u).join(', ')}`);

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await ctx.reply(`üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é "${queue.title}"`, getAdminPanelKeyboard(queueId));
      } catch (e) {
        adminStates.delete(key);
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      }
      return;
    }

    if (state.type === 'awaiting_link') {
      const link = text.trim();
      if (!link.startsWith('http')) {
        return ctx.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏–ª–∏ https)');
      }
      try {
        const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
        if (!queue) {
          adminStates.delete(key);
          return ctx.reply('–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω.');
        }
        await knex('queues').where({ id: queueId }).update({ meet_link: link });
        adminStates.delete(key);
        await ctx.reply(`‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ "${queue.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await ctx.reply(`üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é "${queue.title}"`, getAdminPanelKeyboard(queueId));
      } catch (e) {
        adminStates.delete(key);
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', e);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.');
      }
      return;
    }
  }

  return next();
});

// --- /join @admin_username ---
bot.command('join', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  const adminUsername = args[0];
  const queueTitle = args.slice(1).join(' ');
  const userId = ctx.from.id;
  const username = ctx.from.username || null;

  if (!adminUsername || !adminUsername.startsWith('@')) {
    return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /join @adminname [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏]');
  }

  try {
    const adminUsernameClean = adminUsername.slice(1).toLowerCase();
    const queuesQuery = knex('queues').whereRaw('lower(admin_username) = ?', [adminUsernameClean]);
    const queues = await queuesQuery;

    if (queues.length === 0) {
      return ctx.reply('‚ùå –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π.');
    }

    let queue;
    if (queueTitle) {
      queue = queues.find(q => q.title.toLowerCase() === queueTitle.toLowerCase());
      if (!queue) {
        return ctx.reply(`‚ùå –û—á–µ—Ä–µ–¥—å "${queueTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É @${adminUsernameClean}`);
      }
    } else {
      queue = queues[queues.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    }

    const existing = await knex('participants').where({ queue_id: queue.id, user_id: userId }).first();
    if (existing) {
      return ctx.reply(`‚ùó –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ "${queue.title}".`);
    }

    const maxPos = await knex('participants')
      .where({ queue_id: queue.id })
      .max('position as max')
      .first();

    const position = (maxPos.max || 0) + 1;
    await knex('participants').insert({
      queue_id: queue.id,
      user_id: userId,
      username,
      position,
      status: 'waiting',
    });

    await ctx.reply(`‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å "${queue.title}".`);
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –≤ /join:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.');
  }
});

// --- /mystatus ---
bot.command('mystatus', async (ctx) => {
  const userId = ctx.from.id;
  try {
    const participations = await knex('participants')
      .join('queues', 'participants.queue_id', 'queues.id')
      .where('participants.user_id', userId)
      .select(
        'queues.title as queue_title',
        'participants.position',
        'participants.status'
      );

    if (participations.length === 0) {
      return ctx.reply('–í—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ.');
    }

    let text = 'üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—á–µ—Ä–µ–¥–∏:\n\n';
    for (const p of participations) {
      text += `‚Ä¢ "${p.queue_title}": –ø–æ–∑–∏—Ü–∏—è ${p.position}, —Å—Ç–∞—Ç—É—Å ‚Äî ${p.status}\n`;
    }
    await ctx.reply(text);
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –≤ /mystatus:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

// --- /adminpanel ---
bot.command('adminpanel', async (ctx) => {
  const userId = ctx.from.id;
  try {
    const queues = await knex('queues').where({ admin_id: userId }).orderBy('created_at', 'desc');
    if (queues.length === 0) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ /createqueue');
    }
    const buttons = queues.map((q) => [Markup.button.callback(q.title, `ADMIN_QUEUE_${q.id}`)]);
    await ctx.reply('–í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:', Markup.inlineKeyboard(buttons));
    log(`–ê–¥–º–∏–Ω ${userId} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
  } catch (e) {
    log('–û—à–∏–±–∫–∞ –≤ /adminpanel:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–µ–π.');
  }
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ---
(async () => {
  await initDB();
  await setCommands();
  bot.launch();
  log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
})();

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
bot.catch((err, ctx) => {
  log(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}:`, err);
});
