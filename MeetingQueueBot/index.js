const { Telegraf, Markup } = require('telegraf');
const knex = require('knex')({
  client: 'sqlite3',
  connection: { filename: './queue.db' },
  useNullAsDefault: true
});

const bot = new Telegraf('7794224797:AAFhNDfHkPEoOLxCzRzMsO_JQK72Wc2BOWU'); // <-- —Ç–æ–∫–µ–Ω

const awaitingLinkAdmins = new Map(); // –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ 'userId-queueId'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDB() {
  await knex.schema.createTableIfNotExists('queues', table => {
    table.increments('id').primary();
    table.string('title');
    table.integer('admin_id');
    table.string('meet_link');
    table.timestamp('created_at').defaultTo(knex.fn.now());
  });

  await knex.schema.createTableIfNotExists('participants', table => {
    table.increments('id').primary();
    table.integer('queue_id');
    table.integer('user_id');
    table.string('username');
    table.integer('position');
    table.string('status').defaultTo('waiting');
  });
}

// /start
bot.start(async ctx => {
  ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏!

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å ‚Äî /join
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚Äî /mystatus
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å WebApp ‚Äî /webapp
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å ‚Äî /createqueue –ù–∞–∑–≤–∞–Ω–∏–µ

–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî /help`);
});

// /help
bot.command('help', ctx => {
  ctx.reply(`
üìå –ö–æ–º–∞–Ω–¥—ã:
/start - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/createqueue "–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á—Ä–µ—Ä–µ–¥–∏" - —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
/queueinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ (–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—á–µ—Ä–µ–¥–∏)
/next - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É–±—â–µ–≥–æ
/viewqueue - —Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å (–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—á–µ—Ä–µ–¥–∏)
/join - –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ (–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
/mystatus - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
/webapp - –æ—Ç–∫—Ä—ã—Ç—å Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  `);
});

// /createqueue –ù–∞–∑–≤–∞–Ω–∏–µ
bot.command('createqueue', async ctx => {
  const [_, ...rest] = ctx.message.text.split(' ');
  const title = rest.join(' ').trim();
  if (!title) return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: /createqueue –ù–∞–∑–≤–∞–Ω–∏–µ');

  await knex('queues').insert({
    title,
    admin_id: ctx.from.id,
    meet_link: ''
  });

  ctx.reply(`‚úÖ –û—á–µ—Ä–µ–¥—å "${title}" —Å–æ–∑–¥–∞–Ω–∞!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ /admin ‚Üí "–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤—Å—Ç—Ä–µ—á–∏"`);
});

// /queueinfo ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É
bot.command('queueinfo', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏.');
  const link = queue.meet_link || '—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  ctx.reply(`‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å "${queue.title}"\nüîó ${link}`);
});

// /join ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—É–ø–∞–µ—Ç
bot.command('join', async ctx => {
  const queue = await knex('queues').orderBy('created_at', 'desc').first();
  if (!queue) return ctx.reply('–û—á–µ—Ä–µ–¥—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.');

  const exists = await knex('participants')
    .where({ queue_id: queue.id, user_id: ctx.from.id })
    .first();

  if (exists) return ctx.reply('–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.');

  const count = await knex('participants')
    .where({ queue_id: queue.id })
    .count('* as count')
    .first();

  const position = Number(count.count) + 1;

  await knex('participants').insert({
    queue_id: queue.id,
    user_id: ctx.from.id,
    username: ctx.from.username || '',
    position,
    status: 'waiting'
  });

  ctx.reply(`‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å "${queue.title}". –ü–æ–∑–∏—Ü–∏—è: ${position}`);
});

// /next ‚Äî –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ
bot.command('next', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏!');

  const nextUser = await knex('participants')
    .where({ queue_id: queue.id, status: 'waiting' })
    .orderBy('position', 'asc')
    .first();

  if (!nextUser) return ctx.reply('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');

  await knex('participants')
    .where({ id: nextUser.id })
    .update({ status: 'active' });

  try {
    await ctx.telegram.sendMessage(
      nextUser.user_id,
      `üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: ${queue.meet_link || '[—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞]'}` 
    );
    ctx.reply(`üëâ –í—ã–∑–≤–∞–Ω @${nextUser.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'}`);
  } catch (e) {
    ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –ø–µ—Ä–≤—ã–º –±–æ—Ç—É.`);
  }
});

// /viewqueue
bot.command('viewqueue', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();
  if (!queue) return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏.');

  const participants = await knex('participants')
    .where({ queue_id: queue.id })
    .orderBy('position', 'asc');

  if (!participants.length) return ctx.reply('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');

  let message = `üìã –û—á–µ—Ä–µ–¥—å: ${queue.title}\n\n`;
  participants.forEach(p => {
    message += `${p.position}. @${p.username || '–±–µ–∑ –∏–º–µ–Ω–∏'} (${p.status === 'waiting' ? '‚è≥' : '‚úÖ'})\n`;
  });

  ctx.reply(message);
});

// /mystatus
bot.command('mystatus', async ctx => {
  const queues = await knex('participants')
    .where({ user_id: ctx.from.id })
    .join('queues', 'participants.queue_id', 'queues.id')
    .select('queues.title', 'participants.position', 'participants.status');

  if (!queues.length) return ctx.reply('‚ÑπÔ∏è –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏');

  let message = 'üìä –í–∞—à–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n';
  queues.forEach(q => {
    message += `üîπ ${q.title}: ${q.status === 'waiting' ? `–ü–æ–∑–∏—Ü–∏—è ${q.position}` : '–°–µ–π—á–∞—Å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!'}\n`;
  });

  ctx.reply(message);
});

// /admin ‚Äî –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
bot.command('admin', async ctx => {
  const queue = await knex('queues').where({ admin_id: ctx.from.id }).first();

  if (!queue) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /createqueue');
  }

  return ctx.reply(
    `üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é "${queue.title}"`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å', 'VIEW_QUEUE')],
      [Markup.button.callback('‚è≠Ô∏è –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ', 'NEXT_USER')],
      [Markup.button.callback('üîó –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤—Å—Ç—Ä–µ—á–∏', 'SET_MEET_LINK')],
      [Markup.button.callback('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏', 'QUEUE_INFO')]
    ])
  );
});

bot.command('webapp', (ctx) => {
  ctx.reply('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: 'http://localhost:5173' }
        }
      ]]
    }
  });
});

bot.command('adminpanel', async ctx => {
  const queues = await knex('queues').where({ admin_id: ctx.from.id }).orderBy('created_at', 'desc');

  if (!queues.length) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /createqueue');
  }

  for (const queue of queues) {
    await ctx.reply(
      `üìã –ü–∞–Ω–µ–ª—å –¥–ª—è –æ—á–µ—Ä–µ–¥–∏: "${queue.title}"`,
      Markup.inlineKeyboard([
        [Markup.button.callback(`üë• –û—á–µ—Ä–µ–¥—å (${queue.title})`, `VIEW_QUEUE_${queue.id}`)],
        [Markup.button.callback('‚è≠Ô∏è –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ', `NEXT_USER_${queue.id}`)],
        [Markup.button.callback('üîó –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É', `SET_MEET_LINK_${queue.id}`)],
        [Markup.button.callback('‚ÑπÔ∏è –ò–Ω—Ñ–æ', `QUEUE_INFO_${queue.id}`)],
        [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `DELETE_QUEUE_${queue.id}`)],
      ])
    );
  }
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async ctx => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id;

  const match = data.match(/(VIEW_QUEUE|NEXT_USER|SET_MEET_LINK|QUEUE_INFO|DELETE_QUEUE)_(\\d+)/);
  if (!match) return;

  const action = match[1];
  const queueId = parseInt(match[2]);

  const queue = await knex('queues').where({ id: queueId, admin_id: userId }).first();
  if (!queue) return ctx.reply('‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∞–¥–º–∏–Ω–æ–º.');

  ctx.deleteMessage();

  switch (action) {
    case 'VIEW_QUEUE': {
      const participants = await knex('participants').where({ queue_id: queue.id }).orderBy('position');
      if (!participants.length) return ctx.reply('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');
      let text = `üìã –û—á–µ—Ä–µ–¥—å: ${queue.title}\n\n`;
      for (const p of participants) {
        text += `${p.position}. @${p.username || '–±–µ–∑ –∏–º–µ–Ω–∏'} (${p.status})\n`;
      }
      ctx.reply(text);
      break;
    }

    case 'NEXT_USER': {
      const next = await knex('participants')
        .where({ queue_id: queue.id, status: 'waiting' })
        .orderBy('position')
        .first();
      if (!next) return ctx.reply('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');

      await knex('participants').where({ id: next.id }).update({ status: 'active' });

      try {
        await ctx.telegram.sendMessage(
          next.user_id,
          `üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≤ "${queue.title}"!\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: ${queue.meet_link || '[—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞]'}`
        );
        ctx.reply(`‚úÖ –í—ã–∑–≤–∞–Ω @${next.username}`);
      } catch {
        ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É –ø–µ—Ä–≤—ã–º.`);
      }
      break;
    }

    case 'SET_MEET_LINK': {
      awaitingLinkAdmins.add(userId + '-' + queueId);
      ctx.reply('üì® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:');
      break;
    }

    case 'QUEUE_INFO': {
      ctx.reply(`‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å "${queue.title}"\nüîó ${queue.meet_link || '—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      break;
    }

    case 'DELETE_QUEUE': {
      await knex('participants').where({ queue_id: queue.id }).del();
      await knex('queues').where({ id: queue.id }).del();
      ctx.reply(`üóëÔ∏è –û—á–µ—Ä–µ–¥—å "${queue.title}" —É–¥–∞–ª–µ–Ω–∞.`);
      break;
    }
  }
});

bot.on('text', async ctx => {
  const matches = [...awaitingLinkAdmins].find(key => key.startsWith(ctx.from.id + '-'));
  if (matches) {
    const queueId = parseInt(matches.split('-')[1]);
    const link = ctx.message.text.trim();
    await knex('queues').where({ id: queueId }).update({ meet_link: link });
    awaitingLinkAdmins.delete(matches);
    return ctx.reply(`‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${link}`);
  }
});




// –ó–∞–ø—É—Å–∫
initDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});
